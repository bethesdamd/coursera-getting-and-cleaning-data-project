history()
ufo <- read.delim("/Users/david/machine_learning_for_hackers/01-Introduction/data/ufo/ufo_awesome.tsv", sep="\t", stringsAsFactors=FALSE, header=FALSE, na.strings="")
head(ufo)
v = c("DateOccurred", "DateReported", "Location", "ShortDescription", "Duration", "LongDescription")
v
names(ufo) <- v
head (ufo)
head(ufo[which(nchar(ufo$DateOccurred)!=8 | nchar(ufo$DateReported)!=8),1])
good.rows <- ifelse(nchar(ufo$DateOccurred)>!=8 | nchar(ufo$DateReported)!=8, FALSE, TRUE)
get.location <-function( l) { split.location <-tryCatch( strsplit( l,",")[[ 1]], error = function( e) return( c( NA, NA))) clean.location <-gsub(" ^ ","", split.location) if (length( clean.location) > 2) { return( c( NA, NA)) } else { return( clean.location) } }
good.rows <- ifelse(nchar(ufo$DateOccurred)!=8 | nchar(ufo$DateReported)!=8, FALSE,TRUE)
length(which(!good.rows))
ufo<-ufo[good.rows,]
length(ufo)
ufo
length(ufo)
ufo$DateOccurred<-as.Date(ufo$DateOccurred, format="%Y%m%d")
ufo$DateReported<-as.Date(ufo$DateReported, format="%Y%m%d")
get.location<-function(l) {split.location<-tryCatch(strsplit(l,",")[[1]], error=function(e) return(c(NA,NA)))clean.location<-gsub("^", "",split.location) if (length(clean.location)>2) {return(c(NA,NA))} else {return(clean.location)}}
get.location<-function(l){
split.location<-tryCatch(strsplit(l,",")[[1]], error = function(e)
return(c(NA,NA)))
clean.location<-gsub("^ ","",split.location)
if (length(clean.location)>2) {
return(c(NA,NA))
}
else {
return(clean.location)
}
}
city.state<-lapply(ufo$Location, get.location)
head(city.state)
location.matrix<-do.call(rbind,city.state)
ufo<-transform(ufo, USCity=location.matrix[,1], USState=tolower(location.matrix[,2]), stringsAsFactors=FALSE)
us.states<-c("ak","al","ar","az","ca","co","ct","de","fl","ga","hi","ia","id","il")
ufo$USState<-us.states[match(ufo$USState,us.states)]
ufo$USCity[is.na(ufo$USState)]<-NA
ufo.us<-subset(ufo, !is.na(USState))
head(ufo.us)
summary(ufo.us$DateOccurred)
quick.hist<-ggplot(ufo.us, aes(x=DateOccurred))+geom_histogram()+
scale_x_date(major="50 years")
library(ggplot)
library(ggplot2)
quick.hist<-ggplot(ufo.us, aes(x=DateOccurred))+geom_histogram()+
scale_x_date(major="50 years")
quick.hist<-ggplot(ufo.us, aes(x=DateOccurred))+geom_histogram()
ggsave(plot=quick.hist,filename="/tmp/plot.png", height=6, width=8)
quit
quit()
fix(good.rows)
x <- 1:20
x
x <- 1:40
x
x <- c(0.5,0.6)
x
x <- c(.5,.6)
x
x <- c("a", "b", "c")
x
y <- c(T, 3)
y
z <- 1:50
z
c <- as.character(z)
c
m <- matrix()
m
m <- matrix(nrow=20, ncol=20)
m
dim m
dim(m)
attributes(m)
m <- matrix(1:400, nrow=20, ncol=20)
m
m <- 1:30
dim(m)
m <- matrix(1:30)
m
m <- 1:30
m
dim(m) <- c(3,10)
m
x <- data.frame(foo = 1:4, bar = c(T,T,F,F))
View(x)
x
View(ufo.us)
View(m)
p <- list(a=1,b=5,c=22)
fix(p)
fix(p)
fix(p)
View(p)
m <-matrix(1:20, nrows=5,ncols-4)
m <-matrix(1:20, nrows=5,ncols=4)
m <-matrix(1:20, nrow=5,ncol=4)
m
View(m)
view(m)
x <- "a":"z"
x <- 1:10
x
x[x > 3]
x
$
_
m <- matrix(data = 1:20, nrow=5, ncol=4)
m
m[1]
m[4,2]
m[4,]
x <- list(foo=1:4)
x
fix(x)
View(x)
x <- list(foo=1:4, bar=0.6)
View(x)
x <- c(1,2,NA, 4, NA)
x
bad <- is.na(x)
bad
read.table("/tmp/somedata.txt")
f = read.table("/tmp/somedata.txt")
View(f)
f = read.table("/tmp/somedata.txt")
View(f)
x <- list(foo=1:4, bar=0.6)
dim(x)
head(x)
print(x)
print(1)
x = 3
x
if (x > 2) { print("hi")}
install.packages("ggplot2")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/2.15/Resources/library")
ls()
a
b
install.packages("KernSmooth")
library(KernSmooth)
R.version.string
R.version.string
R.home
R.version
R.version.string
install.packages("swirl")
library(swirl)
install.packages("swirl")
R.version.string
sessionInfo()
library(RCurl)
install.packages("RCurl")
install.packages("libCurl")
install.packages("libcurl")
update.packages()
library(RCurl)
install.packages("RCurl")
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
getwd()
setwd("/Users/david/coursera_july_2014_r_working_directory/")
q()
getwd()
q()
source('~/coursera_july_2014_r_working_directory/r_programming_class/ProgrammingAssignment2/makeCacheMatrix.R')
source('~/coursera_july_2014_r_working_directory/r_programming_class/ProgrammingAssignment2/cacheSolve.R')
source('~/coursera_july_2014_r_working_directory/r_programming_class/ProgrammingAssignment2/cacheSolve.R')
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
cube <- function(x, n) {
x^3
}
cube(3)
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z<-10
f(3)
install.packages("shiny")
install.packages("shiny")
library(shiny)
runExample("01_hello")
remove.packages("shiny")
install.packages("shiny")
install.packages("shiny")
library(shiny)
runExample("01_hello")
l <- c(1,2,3)
lapply(l, avg)
lapply(l, average)
lapply(l, mean)
l <- c(c(1,2,3), c(4,5,6))
lapply(l, mean)
?apply
x <- list(a=1:5, b=rnorm(10))
x
lapply(x,mean)
class(lapply(x,mean))
length(lapply(x,mean))
a <- 1:3
class(a)
?class
runif(1)
runif(3)
class(runif(3))
length(runif(3))
matrix(1:4,2,2)
matrix(1:4,2,3)
matrix(1:4,2,4)
matrix(1:40,10,4)
a<- c(1,2,3)
str(a)
m<-matrix(1:40,10,4)
str(m)
summary(m)
str(c(1,2,3))
str(1:3)
set.seed(10)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
y
library(corrplot)
install.packages("corrplot")
library(corrplot)
M <- cor(mtcars)
corrplot(M, method = "circle")
View(M)
?cor
M
View(M)
corrplot(M, method = "circle")
names(mtcars)
names(M)
M
ncol(M)
nrow(M)
x <- data.frame(1:16, nrow=4, ncol=4)
x
corrplot(x, method="circle")
?corrplot
m <- matrix(1:16, nrow=4,ncol=4)
m
corrplot(m, is.corr=F)
rownames(m) <- c("one", "two", "three", "four")
m
corrplot(m, is.corr=F)
colnames(m) <- c("a", "b", "c", "d")
corrplot(m, is.corr=F)
install.packages("RMySQL")
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
sample(1:5)
sample(1:5)
sample(1:5)
sample(1:5)
sample(1:1000)
X <- data.frame("var1" = sample(1:5), "var2"=sample(6:10), "var3"=sample(11:15))
X
X<-X[sample(1:5,)];
X[sample(1:5,)];
X
X[sample(1:5),]
X<-X[sample(1:5),]; X$var2[c(1,3)]=NA
X
X[,1]
which(X$var1 > 1)
which(X$var1 > 3)
which(X$var1 > 33)
rnorm(5)
installed.packages()
library(RMySQL)
mydb = dbConnect(MySQL(), user='root', password='', dbname='enron', host='localhost')
mydb
dbListTables(mydb)
rs = dbSendQuery(mydb, 'select * from messages limit 10')
rs
rs = dbSendQuery(mydb, 'select * from enron.messages limit 10')
rs = dbSendQuery(mydb, "select * from enron.messages limit 10")
rs.close()
rs = dbSendQuery(mydb, "select * from foobar limit 10")
rs = dbSendQuery(mydb, "select * from foobar limit 10")
mydb
data = fetch(rs, n=-1)
data = fetch(rs, n=-1)
View(data)
rs = dbSendQuery(mydb, "select * from foobar limit 1000")
data = fetch(rs, n=-1)
rs2 = dbSendQuery(mydb, "select * from foobar limit 1000")
rs2 = dbSendQuery(mydb, "select * from messages limit 1000")
data = fetch(rs2, n=-1)
View(data)
rs <- dbSendQuery(mydb, "select * from mailgraph")
data = fetch(rs, n=-1)
head(data)
data
data
names(data)
install.packages("sqldf")
oauth_app()
install.packages("ROAuth")
httr
?httr
install.packages("httr")
oauth_app
httr
library(OAuthApp)
library(ROAuth)
oauth_app
?oauth_app
??oauth_app
library(httr)
?oauth_app
x <- oauth_app("github", "d22e3ee713769eb2e5a7", "a1917e262dbee6de11a436efde6eb448a230744c")
app <- oauth_app("github", "d22e3ee713769eb2e5a7", "a1917e262dbee6de11a436efde6eb448a230744c")
myapp <- oauth_app("github", "a1917e262dbee6de11a436efde6eb448a230744c")
Sys.setenv(R_TEST = "testit", "A+C" = 123)
Sys.setenv(GITHUB_CONSUMER_SECRET = "a1917e262dbee6de11a436efde6eb448a230744c")
Sys.getenv(GITHUB_CONSUMER_SECRET)
Sys.getenv("GITHUB_CONSUMER_SECRET")
myapp <- oauth_app("github", "d22e3ee713769eb2e5a7")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth1.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoint("github"), myapp)
?oauth_endpoint
github_token <- oauth2.0_token(oauth_endpoint(NULL, "authorize", "access_token", base_url = "https://github.com/login/oauth"), myapp)
library(Rook)
install.packages("Rook")
library(Rook)
github_token <- oauth2.0_token(oauth_endpoint(NULL, "authorize", "access_token", base_url = "https://github.com/login/oauth"), myapp)
github_token <- oauth2.0_token(oauth_endpoint("http://www.example.com", "authorize", "access_token", base_url = "https://github.com/login/oauth"), myapp)
library(httr)
github_token <- oauth2.0_token(oauth_endpoint("http://www.example.com", "authorize", "access_token", base_url = "https://github.com/login/oauth"), myapp)
github_token <- oauth2.0_token(oauth_endpoint(NULL, "authorize", "access_token", base_url = "https://github.com/login/oauth"), myapp)
myapp <- oauth_app("github", "d22e3ee713769eb2e5a7")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoint("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoint(NULL, "authorize", "access_token", base_url = "https://github.com/login/oauth"), myapp)
github_token <- oauth2.0_token(oauth_endpoint(NULL, "authorize", "access_token", base_url = "https://github.com/login/oauth"), myapp)
?oauth_app
git <- oauth_endpoint(NULL, "authorize", "access", base_url = "https://github.com/login/oauth")
github_token <- oauth2.0_token(git, myapp)
?oauth_endpoint
install.packages('httpuv')
library(httpuv)
?oauth_endpoint
github_token <- oauth2.0_token(git, myapp)
install.packages(httr)
install.packages('httr')
install.packages("httr")
library(httr)
oauth_endpoints("github")
library(httr)
oauth_endpoints("github")
R.Version()
getwd()
acs <- read.file("data")
acs <- read.csv("data")
View(acs)
names(acs)
library(sqldf)
sqldf("select pwgtp1 from acs where AGEP < 50")
names(acs)
acs$pwgtp1
unique(acs$AGEP)
sqldf("select distinct AGEP from acs")
con = url("http://biostat.jhsph.edu/~jleek/contact.html ")
htmlCode = readLines(con)
close(con)
htmlCode
v = c(1,2,3)
for (i in v) { print(i)}
v = c(1,2,6)
for (i in v) { print(i)}
v = c(10,20,30,100)
for (i in v) { print(i)}
for (i in v) { print(htmlCode[i]}
htmlCode(1)
htmlCode[1]
for (i in v) { print(htmlCode[i])}
for (i in v) { print(length(htmlCode[i])}
?length
length(htmlCode[1])
for (i in v)  print(length(htmlCode[i]))
for (i in v)  print(nchar(htmlCode[i]))
read.fwf("data", skip=4, widths=c(-28,4), col.names=c("foo"))
out <- read.fwf("data", skip=4, widths=c(-28,4), col.names=c("foo"))
out
head(out)
out <- read.fwf("data", skip=4, widths=c(-28,4), col.names=c("foo"))
names(out)
?read.fwf
out <- read.fwf("data", skip=4, widths=c(-28,4), col.names=c("foo"), colClasses=c("numeric"))
out <- read.fwf("data", skip=4, widths=c(28,4), col.names=c("ign", "foo"))
head(out)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", destfile="5")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", destfile="5", method="curl")
getwd()
out <- read.fwf("5", skip=4, widths=c(28,4), col.names=c("ign", "foo"))
head(out)
out$foo
sum(out$foo)
install.packages("RMySQL)
q()
# There are 561 features
# X_test has 2947 lines of data with 561 records each
# Y_test has only 2947 records total, so I guess it's one column of data
# 1,653,267 total elements once cleaned
#
# X_train has 7352 lines with 561 records per line
# Y_train has 7352 records total, so one column
# 4,124,472 total records
setwd("/Users/david/coursera_data_science_track/getting_and_cleaning_data_course/project//UCI HAR Dataset")
# Get raw features data; every other line will be a record number integer we discard later
features_raw <- scan("features.txt", sep=" ", what="list")
# Create a vector of even numbers, to discard the record number, i.e. 2,4,6,...1122
s <- c(1:length(features_raw))[c(F,T)]
# Discard record numbers
col_names <- features_raw[s]
# to read in X_test.txt, try this, however it doesn't create a data frame:
# watch for two leading spaces at the begining of the file
# this might be a fixed delimited file?  however those two leading spaces are only on the
# FIRST line of the file, not on all lines...
X_test <- scan("test/X_test.txt", sep=" ", what="list")
# there are empty strings in the data, find them with this:
cleaned <- X_test[which(X_test != "")]
# Try this for holding the main data set, where T is 'byrow'
# Get rid of explicit nrow and ncol, do that programmatically instead
m <- matrix (cleaned, 2947, 561, T)
# They are strings, watch out for this if doing any summarization!!
length(col_names)
col_names[1]
col_names[2]
col_names[4]
for(i in col_names) print(i)
grep("std", "std")
grep("std", "st")
grep("std", "st") == 1
grep("std", "st") == 0
grep("std", "st")
if(grep("std", "st")) print("yes")
if(grep("std", "st")) print(4)
if (grep("x", "x")) { print(1)}
if (grep("x", "u")) { print(1)}
for(i in col_names) print(i)
for(i in col_names) print(i); print(2)
for(i in col_names) print(i)
for(i in col_names) print(grep("std", i)
)
for(i in col_names) g<-grep("std", i)
g
regexpr("x", "x")
regexpr("x", "w")
regexpr("x", "w").match.length
grepl("x","x")
grepl("x","e")
for(s in col_names) grepl("std", s)
for(s in col_names) print(grepl("std", s))
setwd("/Users/david/coursera_data_science_track/getting_and_cleaning_data_course/project//UCI HAR Dataset")
# Get raw features data; every other line will be a record number integer we discard later
features_raw <- scan("features.txt", sep=" ", what="list")
# Create a vector of even numbers, to discard the record number, i.e. 2,4,6,...1122
s <- c(1:length(features_raw))[c(F,T)]
# Discard record numbers
col_names <- features_raw[s]
# Find 'std' or 'mean' in column names
for(s in col_names) {
print(grepl("std", s))
}
which(grep("std", col_names))
which(grepl("std", col_names))
which(grepl("std", col_names) || grepl("mean", col_names))
which(grepl("mean", col_names))
which(grepl("std", col_names) || grepl("mean", col_names))
which(grepl("std", col_names) | grepl("mean", col_names))
which(grepl("std", col_names) | grepl("mean", col_names))
?grepl
crossprod(c(1,2,3))
